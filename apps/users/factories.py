import factory
from django.contrib.auth import get_user_model
from django.contrib.auth.models import Group
from faker import Faker

fake = Faker(locale="ru_RU")

User = get_user_model()


class UserFactory(factory.django.DjangoModelFactory):
    """Create User objects with username and password. Required keyword parameter: `role_type`.

    Behavior and available paremeters:
    1. `role_type` is required paramater. Allowed values are `admin`, `editor`, etc. (look for
    list types in `create` method),
    2. Username is generated by default in format `{faked_username_prefix}_{sequence_number}`.
    3. Username prefix could be overwritten with `username_prefix` parameter.
    """

    class Meta:
        model = User
        django_get_or_create = ("username",)

    class Params:
        username_prefix = None

    password = factory.PostGenerationMethodCall("set_password", "pass")

    @factory.lazy_attribute_sequence
    def username(self, index):
        """Set username followed by sequence number.

        1. Default behavior: use `fake.user_name` as a prefix to create faked usernames.
        2. If `username_prefix` is set: use it as a prefix instead of `fake.user_name`.
        """
        if self.username_prefix is None:
            return f"{fake.user_name()}_{index:02d}"
        return f"{self.username_prefix}_{index:02d}"

    @classmethod
    def create(cls, **kwargs):
        """Verify that `role_type` is provided and the value is allowed type."""
        allowed_group_types = (
            "editor",
            "admin",
            "journalist",
            "observer",
        )
        role_type = kwargs.get("role_type", None)
        assert role_type in allowed_group_types, f"`role_type` should be in {allowed_group_types}."
        return super().create(**kwargs)

    @factory.post_generation
    def role_type(self, created, role_type: str, **kwargs):
        """Add User to group `editor` or `admin`."""
        if created:
            group = Group.objects.get(name=role_type)
            self.groups.add(group)


class JournalistUserFactory(UserFactory):
    """Create Journalist User objects.

    Do two things:
    1. The username in format `journalist_{sequence_number}`
    2. Add user to `journalist` group.
    """

    class Params:
        username_prefix = "journalist"

    @classmethod
    def create(cls, **kwargs):
        kwargs["role_type"] = "journalist"
        return super().create(**kwargs)


class EditorUserFactory(UserFactory):
    """Create Editor User objects.

    Do two things:
    1. The username in format `editor_{sequence_number}`
    2. Add user to `editor` group.
    """

    class Params:
        username_prefix = "editor"

    @classmethod
    def create(cls, **kwargs):
        kwargs["role_type"] = "editor"
        return super().create(**kwargs)


class AdminUserFactory(UserFactory):
    """Create Admin User objects.

    Do two things:
    1. The username in format `admin_{sequence_number}`
    2. Add user to `admin` group.
    """

    class Params:
        username_prefix = "admin"

    @classmethod
    def create(cls, **kwargs):
        kwargs["role_type"] = "admin"
        return super().create(**kwargs)


class ObserverUserFactory(UserFactory):
    """Create Observer User objects.

    Do two things:
    1. The username in format `observer_{sequence_number}`
    2. Add user to `observer` group.
    """

    class Params:
        username_prefix = "observer"

    @classmethod
    def create(cls, **kwargs):
        kwargs["role_type"] = "observer"
        return super().create(**kwargs)
