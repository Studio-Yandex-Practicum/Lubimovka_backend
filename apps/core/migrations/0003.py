# Generated by Django 3.2.11 on 2022-01-29 10:03

import apps.core.validators
from django.db import migrations, models


def sort_by_group(apps, schema_editor):
    Setting = apps.get_model('core', 'Setting')
    group = {
        "EMAIL": "mail",
        "MAIN": "main",
        "FIRST_SCREEN": "first_screen",
        "GENERAL": "GENERAL"
    }
    setting_first_screen = Setting.objects.filter(
        settings_key__icontains=group['FIRST_SCREEN']
    ).all()
    for setting in setting_first_screen:
        setting.group = 'FIRST_SCREEN'
        setting.save()
    setting_main = Setting.objects.filter(
        settings_key__icontains=group['MAIN'],
        group='GENERAL'
    ).all()
    for setting in setting_main:
        setting.group = 'MAIN'
        setting.save()
    setting_email = Setting.objects.filter(
        settings_key__icontains=group['EMAIL'],
        group="GENERAL"
    ).all()
    for setting in setting_email:
        setting.group = 'EMAIL'
        setting.save()

def add_settings(apps, schema_editor):

    Setting = apps.get_model("core", "Setting")

    Setting.objects.filter(settings_key="mail_send_to").delete()

    Setting.objects.create(
        field_type="TEXT",
        group="EMAIL",
        settings_key="email_question_template_id",
        text="3420599",
        description="Id шаблона письма с вопросом",
    )
    Setting.objects.create(
        field_type="TEXT",
        group="EMAIL",
        settings_key="email_send_from",
        text="questions@lyubimovka.ru",
        description="Почта для отправки вопроса",
    )
    Setting.objects.create(
        field_type="TEXT",
        group="EMAIL",
        settings_key="email_send_to",
        text="admin@lyubimovka.ru",
        description="Почта для приёма вопроса",
    )

def set_name_plural(apps, schema_editor):
    Role = apps.get_model("core", "Role")
    for role in Role.objects.all():
        if len(role.name_plural) == 0:
            role.name_plural = role.name + "'s"
            role.save()

def add_plural(apps, schema_editor):
    Role = apps.get_model("core", "Role")
    roles = [
        {
            "name": "Актёр",
            "name_plural": "Актёры",
        },
        {
            "name": "Адаптация текста",
            "name_plural": "Адаптация текста",
        },
        {
            "name": "Драматург",
            "name_plural": "Драматурги",
        },
        {
            "name": "Режиссёр",
            "name_plural": "Режиссёры",
        },
        {
            "name": "Переводчик",
            "name_plural": "Переводчики",
        },
        {
            "name": "Ведущий",
            "name_plural": "Ведущие",
        },
        {
            "name": "Текст",
            "name_plural": "Текст",
        },
        {
            "name": "Иллюстрации",
            "name_plural": "Иллюстрации",
        },
        {
            "name": "Фото",
            "name_plural": "Фото",
        },
    ]
    for role in roles:
        obj = Role.objects.get(name=role["name"])
        obj.name_plural = role["name_plural"]
        obj.save()

def delete_settings(apps, schema_editor):

    Setting = apps.get_model("core", "Setting")

    Setting.objects.filter(settings_key="main_afisha_title").delete()
    Setting.objects.filter(settings_key="main_afisha_description").delete()
    Setting.objects.filter(settings_key="main_afisha_button_label").delete()

def add_afisha_settings(apps, schema_editor):

    Setting = apps.get_model("core", "Setting")

    Setting.objects.create(
        field_type="TEXT",
        group="AFISHA",
        settings_key="afisha_title_festival",
        text="Афиша фестиваля",
        description="Заголовок афиши во время фестиваля",
    )
    Setting.objects.create(
        field_type="TEXT",
        group="AFISHA",
        settings_key="afisha_title_regular",
        text="Афиша событий",
        description="Заголовок афиши регулярный",
    )
    Setting.objects.create(
        field_type="TEXT",
        group="AFISHA",
        settings_key="afisha_description_festival",
        text="На все читки и мастер-классы фестиваля вход свободный по предварительной регистрации.",
        description="Описание под заголовком во время фестиваля",
    )
    Setting.objects.create(
        field_type="TEXT",
        group="AFISHA",
        settings_key="afisha_description_regular",
        text="На все читки и мастер-классы фестиваля вход свободный по предварительной регистрации.",
        description="Описание под заголовком регулярное",
    )
    Setting.objects.create(
        field_type="TEXT",
        group="AFISHA",
        settings_key="afisha_info_festival_text",
        text="Регистрация на каждое мероприятие открывается в 12:00 предыдущего дня.",
        description="Информация о регистрации на событие фестиваля",
    )
    Setting.objects.create(
        field_type="TEXT",
        group="AFISHA",
        settings_key="afisha_asterisk_text",
        text="После каждой читки будет проходить обсуждение с участием аудитории, автора и театральных профессионалов.",
        description="Текст со звёздочкой возле заголовка",
    )

def add_group_to_setting_image(apps, schema_editor):
    Setting = apps.get_model("core", "Setting")
    Setting.objects.create(
        field_type="IMAGE",
        group="FIRST_SCREEN",
        settings_key="main_first_screen_image",
        image="core/2021-09-30_14.37.56.jpg",
        description="Изображение для первой страницы",
    )


class Migration(migrations.Migration):

    replaces = [('core', '0018_auto_20211209_1958'), ('core', '0019_sorting_settings_by_groups'), ('core', '0020_data_add_mail_settings'), ('core', '0021_alter_setting_description'), ('core', '0022_role_name_plural'), ('core', '0023_data_roles_add_plural'), ('core', '0024_data_add_type_roles_another'), ('core', '0025_alter_setting_group'), ('core', '0026_delete_old_afisha_settings'), ('core', '0027_add_afisha_settings'), ('core', '0028_auto_20220118_2233'), ('core', '0029_auto_20220123_1450'), ('core', '0030_auto_20220127_1720'), ('core', '0031_add_image_main_settings')]

    dependencies = [
        ('core', '0002'),
    ]

    operations = [
        migrations.RenameModel(
            old_name='Settings',
            new_name='Setting',
        ),
        migrations.AlterModelOptions(
            name='setting',
            options={'ordering': ('group', 'settings_key'), 'verbose_name': 'Общие настройки', 'verbose_name_plural': 'Общие настройки'},
        ),
        migrations.AddField(
            model_name='setting',
            name='group',
            field=models.CharField(choices=[('EMAIL', 'Почта'), ('MAIN', 'Главная'), ('FIRST_SCREEN', 'Первая страница'), ('GENERAL', 'Общие')], default='GENERAL', max_length=50, verbose_name='Группа настроек'),
        ),
        migrations.RunPython(
            sort_by_group,
        ),
        migrations.RunPython(
           add_settings,
        ),
        migrations.AlterField(
            model_name='setting',
            name='description',
            field=models.TextField(blank=True, default='', max_length=250, verbose_name='Описание настройки'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='role',
            name='name_plural',
            field=models.CharField(blank=True, max_length=50, verbose_name='Название во множественном числе'),
        ),
        migrations.RunPython(
            set_name_plural,
        ),
        migrations.AlterField(
            model_name='role',
            name='name_plural',
            field=models.CharField(max_length=50, unique=True, verbose_name='Название во множественном числе'),
        ),
        migrations.RunPython(
            add_plural,
        ),
        migrations.AlterField(
            model_name='setting',
            name='group',
            field=models.CharField(choices=[('EMAIL', 'Почта'), ('MAIN', 'Главная'), ('FIRST_SCREEN', 'Первая страница'), ('GENERAL', 'Общие'), ('AFISHA', 'Афиша')], default='GENERAL', max_length=50, verbose_name='Группа настроек'),
        ),
        migrations.RunPython(
            delete_settings,
        ),
        migrations.RunPython(
            add_afisha_settings,
        ),
        migrations.AlterField(
            model_name='person',
            name='first_name',
            field=models.CharField(max_length=50, validators=[apps.core.validators.name_validator], verbose_name='Имя'),
        ),
        migrations.AlterField(
            model_name='person',
            name='last_name',
            field=models.CharField(max_length=50, validators=[apps.core.validators.name_validator], verbose_name='Фамилия'),
        ),
        migrations.AlterField(
            model_name='person',
            name='middle_name',
            field=models.CharField(blank=True, max_length=50, validators=[apps.core.validators.name_validator], verbose_name='Отчество'),
        ),
        migrations.AlterField(
            model_name='person',
            name='city',
            field=models.CharField(blank=True, help_text='Обязательно указать для: членов команды, волонтёров.', max_length=50, verbose_name='Город проживания'),
        ),
        migrations.AlterField(
            model_name='person',
            name='email',
            field=models.EmailField(blank=True, help_text='Обязательно указать для: членов команды, волонтёров.', max_length=200, null=True, unique=True, verbose_name='Электронная почта'),
        ),
        migrations.AlterField(
            model_name='person',
            name='image',
            field=models.ImageField(blank=True, help_text='Обязательно указать для: членов команды, спонсоров и волонтёров.', upload_to='images/person_avatars', verbose_name='Фотография'),
        ),
        migrations.AlterField(
            model_name='person',
            name='city',
            field=models.CharField(blank=True, help_text='Обязательно указать для: членов команды, волонтёров и авторов.', max_length=50, verbose_name='Город проживания'),
        ),
        migrations.AlterField(
            model_name='person',
            name='email',
            field=models.EmailField(blank=True, help_text='Обязательно указать для: членов команды, волонтёров и авторов.', max_length=200, null=True, unique=True, verbose_name='Электронная почта'),
        ),
        migrations.RunPython(
            add_group_to_setting_image,
        )
    ]
