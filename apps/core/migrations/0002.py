# Generated by Django 3.2.11 on 2022-01-29 09:17

from django.db import migrations, models


def add_settings(apps, schema_editor):
    Settings = apps.get_model('core', 'Settings')
    Settings.objects.create(
        field_type="BOOLEAN",
        settings_key="festival_status",
        boolean=True,
    )
    Settings.objects.create(
        field_type="TEXT",
        settings_key="site_color",
        text="green",
    )
    Settings.objects.create(
        field_type="EMAIL",
        settings_key="mail_send_to",
        email="testtest@testtest.test",
    )
    Settings.objects.create(
        field_type="BOOLEAN",
        settings_key="form_to_submit_a_play",
        boolean=True,
    )
    Settings.objects.create(
        field_type="TEXT",
        settings_key="email_subject_for_question",
        text="Вопрос Любимовке",
    )
    values = [
        "Festival_status",
        "Site_color",
        "Mail_send_to",
        "Form_to_submit_a_play"
    ]
    for value in values:
        if Settings.objects.filter(
            settings_key=value,
        ).exists():
            setting = Settings.objects.get(settings_key=value,)
            setting.settings_key = value.lower()
            setting.save()

def add_description(apps, schema_editor):
    Settings = apps.get_model('core', 'Settings')
    description_values = {
        "festival_status": "Статус фестиваля",
        "site_color": "Цвет сайта",
        "mail_send_to": "Почта для отправки сообщений",
        "form_to_submit_a_play": "Форма для отправки пьесы",
        "email_subject_for_question": "Тема письма для вопроса"
    }
    for key, value in description_values.items():
        if Settings.objects.filter(
            settings_key=key,
        ).exists():
            setting = Settings.objects.get(settings_key=key,)
            setting.description = value
            setting.save()

def create_roles(apps, schema_editor):
    Role = apps.get_model("core", "Role")
    roles = [
        {
            "name": "Актёр",
            "slug": "actor",
        },
        {
            "name": "Адаптация текста",
            "slug": "text_adaptation",
        },
        {
            "name": "Драматург",
            "slug": "dramatist",
        },
        {
            "name": "Режиссёр",
            "slug": "director",
        },
        {
            "name": "Переводчик",
            "slug": "translator",
        },
        {
            "name": "Ведущий",
            "slug": "host",
        },
        {
            "name": "Текст",
            "slug": "text",
        },
        {
            "name": "Иллюстрации",
            "slug": "illustrations",
        },
        {
            "name": "Фото",
            "slug": "photo",
        },
    ]
    for role in roles:
        role_obj, _ = Role.objects.get_or_create(**role)
        role_obj.save()

def add_main_settings(apps, schema_editor):

    Settings = apps.get_model("core", "Settings")
    Settings.objects.create(
        field_type="BOOLEAN",
        settings_key="main_add_afisha",
        boolean=True,
        description="Отображение афиши на главной страницы",
    )
    Settings.objects.create(
        field_type="TEXT",
        settings_key="main_afisha_title",
        text="Афиша событий",
        description="Заголовок для афиши на главной страницы",
    )
    Settings.objects.create(
        field_type="TEXT",
        settings_key="main_afisha_description",
        text="",
        description="На все читки и мастер-классы фестиваля вход свободный по предварительной регистрации.",
    )
    Settings.objects.create(
        field_type="TEXT",
        settings_key="main_afisha_button_label",
        text="Полная афиша",
        description="Ярлык ссылки на странице афиши",
    )
    Settings.objects.create(
        field_type="BOOLEAN",
        settings_key="main_show_afisha_only_for_today",
        boolean=True,
        description="Отображение афиши только на сегодня (в противном случае " "на ближайшие 6 дней)",
    )
    Settings.objects.create(
        field_type="BOOLEAN",
        settings_key="main_add_news",
        boolean=True,
        description="Отображение новостей на главной страницы",
    )
    Settings.objects.create(
        field_type="TEXT",
        settings_key="main_news_title",
        text="Новости",
        description="Заголовок для новостей на главной страницы",
    )
    Settings.objects.create(
        field_type="BOOLEAN",
        settings_key="main_add_blog",
        boolean=True,
        description="Отображение дневника на главной страницы",
    )
    Settings.objects.create(
        field_type="TEXT",
        settings_key="main_blog_title",
        text="Дневник фестиваля",
        description="Заголовок для дневника на главной страницы",
    )
    Settings.objects.create(
        field_type="BOOLEAN",
        settings_key="main_add_banners",
        boolean=True,
        description="Отображение банера на главной страницы",
    )
    Settings.objects.create(
        field_type="BOOLEAN",
        settings_key="main_add_short_list",
        boolean=True,
        description="Отображение шорт-листа на главной страницы",
    )
    Settings.objects.create(
        field_type="TEXT",
        settings_key="main_short_list_title",
        text="Шорт-лист 2020 года",
        description="Заголовок для шорт-листа на главной страницы",
    )
    Settings.objects.create(
        field_type="BOOLEAN",
        settings_key="main_add_video_archive",
        boolean=True,
        description="Отображение видео-архива на главной страницы",
    )
    Settings.objects.create(
        field_type="URL",
        settings_key="main_video_archive_url",
        url="https://lubimovks.url.ru",
        description="Ссылка на youtube видео-архива на главной страницы",
    )
    Settings.objects.create(
        field_type="IMAGE",
        settings_key="main_video_archive_photo",
        image="core/2021-09-30_14.37.56.jpg",
        description="Фото для видео-архива на главной страницы",
    )
    Settings.objects.create(
        field_type="BOOLEAN",
        settings_key="main_add_places",
        boolean=True,
        description="Отображение площадок на главной страницы",
    )
    Settings.objects.create(
        field_type="BOOLEAN",
        settings_key="main_add_first_screen",
        boolean=True,
        description="Отображение первой страницы",
    )
    Settings.objects.create(
        field_type="TEXT",
        settings_key="main_first_screen_title",
        text="Открыт прием пьес на фестиваль 2021 года",
        description="Заголовок для первой страницы",
    )
    Settings.objects.create(
        field_type="TEXT",
        settings_key="main_first_screen_url_title",
        text="Заголовок для ссылки для первой страницы",
        description="Заголовок для первой страницы",
    )
    Settings.objects.create(
        field_type="URL",
        settings_key="main_first_screen_url",
        url="https://lubimovks.url.ru",
        description="Ссылка для первой страницы страницы",
    )

def create_role_types(apps, schema_editor):
    RoleType = apps.get_model("core", "RoleType")
    role_types = [
        {
            "role_type": "blog_persons_role",
        },
        {
            "role_type": "performanse_role",
        },
        {
            "role_type": "play_role",
        },
        {
            "role_type": "master_class_role",
        },
        {
            "role_type": "reading_role",
        },
    ]
    for type in role_types:
        type_obj, _ = RoleType.objects.get_or_create(**type)
        type_obj.save()

def add_types_to_roles(apps, schema_editor):
    Role = apps.get_model("core", "Role")
    RoleType = apps.get_model("core", "RoleType")
    roles = [
        {
            "name": "Актёр",
            "slug": "actor",
            "types": "performanse_role",
        },
        {
            "name": "Адаптация текста",
            "slug": "text_adaptation",
            "types": "blog_persons_role",
        },
        {
            "name": "Драматург",
            "slug": "dramatist",
            "types": "play_role",
        },
        {
            "name": "Драматург",
            "slug": "dramatist",
            "types": "performanse_role",
        },
        {
            "name": "Драматург",
            "slug": "dramatist",
            "types": "reading_role",
        },
        {
            "name": "Режиссёр",
            "slug": "director",
            "types": "performanse_role",
        },
        {
            "name": "Режиссёр",
            "slug": "director",
            "types": "reading_role",
        },
        {
            "name": "Переводчик",
            "slug": "translator",
            "types": "blog_persons_role",
        },
        {
            "name": "Ведущий",
            "slug": "host",
            "types": "play_role",
        },
        {
            "name": "Ведущий",
            "slug": "host",
            "types": "master_class_role",
        },
        {
            "name": "Текст",
            "slug": "text",
            "types": "blog_persons_role",
        },
        {
            "name": "Иллюстрации",
            "slug": "illustrations",
            "types": "blog_persons_role",
        },
        {
            "name": "Фото",
            "slug": "photo",
            "types": "blog_persons_role",
        },
    ]
    for role in roles:
        role_obj = Role.objects.get(name=role["name"])
        type_of_role = RoleType.objects.get(role_type=role["types"])
        role_obj.types.add(type_of_role)
        role_obj.save()


class Migration(migrations.Migration):

    replaces = [('core', '0005_settings'), ('core', '0006_create_settings_objects'), ('core', '0007_add_and_fix_settings'), ('core', '0008_auto_20211118_1714'), ('core', '0009_add_description'), ('core', '0010_role'), ('core', '0011_data_initial_roles'), ('core', '0012_auto_20211130_0005'), ('core', '0013_data_add_main_settings'), ('core', '0014_data_add_missing_main_settings'), ('core', '0015_auto_20211207_2057'), ('core', '0016_data_role_types'), ('core', '0017_data_add_type_roles')]

    dependencies = [
        ('core', '0001'),
    ]

    operations = [
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('field_type', models.CharField(choices=[('BOOLEAN', 'Да/Нет'), ('TEXT', 'Текст'), ('URL', 'URL'), ('IMAGE', 'Картинка'), ('EMAIL', 'EMAIL')], max_length=40, verbose_name='Выбор поля настроек')),
                ('settings_key', models.SlugField(max_length=40, unique=True, verbose_name='Ключ настройки')),
                ('boolean', models.BooleanField(default=False, verbose_name='Да или Нет')),
                ('text', models.CharField(blank=True, max_length=100, verbose_name='Текст')),
                ('url', models.URLField(blank=True, verbose_name='Ссылка')),
                ('image', models.ImageField(blank=True, upload_to='core/', verbose_name='Изображение')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
            ],
            options={
                'verbose_name': 'Общие настройки',
                'verbose_name_plural': 'Общие настройки',
            },
        ),
        migrations.RunPython(
            add_settings,
        ),
        migrations.AddField(
            model_name='settings',
            name='description',
            field=models.CharField(max_length=60, null=True, verbose_name='Описание настройки'),
        ),
        migrations.RunPython(
            add_description,
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Название')),
                ('slug', models.SlugField(help_text='Если пустое, то заполняется автоматически', max_length=60, unique=True, verbose_name='Код-имя латиницей')),
            ],
            options={
                'verbose_name': 'Должность/позиция',
                'verbose_name_plural': 'Должности/позиции',
                'ordering': ('name',),
            },
        ),
        migrations.RunPython(
            create_roles,
        ),
        migrations.AlterField(
            model_name='settings',
            name='description',
            field=models.TextField(max_length=250, null=True, verbose_name='Описание настройки'),
        ),
        migrations.AlterField(
            model_name='settings',
            name='text',
            field=models.TextField(blank=True, max_length=500, verbose_name='Текст'),
        ),
        migrations.RunPython(
           add_main_settings,
        ),
        migrations.CreateModel(
            name='RoleType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_type', models.CharField(choices=[('blog_persons_role', 'Роль в блоге'), ('performanse_role', 'Роль в спектаклях'), ('play_role', 'Роль в пьесах'), ('master_class_role', 'Роль в мастер классах'), ('reading_role', 'Роль в читках')], default='blog_persons_role', help_text='Укажите, где будет использована роль', max_length=20, unique=True, verbose_name='Тип роли')),
            ],
            options={
                'verbose_name': 'Тип роли',
                'verbose_name_plural': 'Типы ролей',
            },
        ),
        migrations.AddField(
            model_name='role',
            name='types',
            field=models.ManyToManyField(related_name='type_roles', to='core.RoleType', verbose_name='Типы ролей'),
        ),
        migrations.RunPython(
            create_role_types,
        ),
        migrations.RunPython(
            add_types_to_roles,
        ),
    ]
