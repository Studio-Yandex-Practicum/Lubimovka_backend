from django.core.exceptions import ValidationError
from django.core.validators import FileExtensionValidator
from django.db import models
from django.db.models import UniqueConstraint
from django.utils.translation import gettext_lazy as _

from apps.content_pages.utilities import path_by_media_and_class_name
from apps.core.mixins import FileCleanUpMixin
from apps.core.models import BaseModel
from apps.core.utils import slugify
from apps.info.models import Festival
from apps.library.services import hide_play_file, restore_play_file
from apps.library.validators import year_validator


class ProgramType(BaseModel):
    name = models.CharField(
        max_length=200,
        unique=True,
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
    )
    slug = models.SlugField(
        max_length=40,
        verbose_name="Slug",
        unique=True,
    )

    class Meta:
        ordering = ("id",)
        verbose_name = "–ü—Ä–æ–≥—Ä–∞–º–º–∞"
        verbose_name_plural = "–ü—Ä–æ–≥—Ä–∞–º–º—ã"

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        return super().save(*args, **kwargs)


ALLOWED_FORMATS_FILE_FOR_PLAY = (
    "doc",
    "docx",
    "txt",
    "odt",
    "pdf",
)


class Play(FileCleanUpMixin, BaseModel):
    cleanup_fields = ("url_download",)
    name = models.CharField(
        max_length=200,
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—å–µ—Å—ã",
    )
    city = models.CharField(
        max_length=200,
        verbose_name="–ì–æ—Ä–æ–¥",
        blank=True,
        null=True,
    )
    year = models.PositiveSmallIntegerField(
        validators=[year_validator],
        verbose_name="–ì–æ–¥ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—å–µ—Å—ã",
        blank=True,
        null=True,
    )
    url_download = models.FileField(
        validators=(FileExtensionValidator(ALLOWED_FORMATS_FILE_FOR_PLAY),),
        max_length=200,
        blank=True,
        null=True,
        upload_to=path_by_media_and_class_name,
        verbose_name="–¢–µ–∫—Å—Ç –ø—å–µ—Å—ã",
        help_text=(
            f"–§–∞–π–ª –ø—å–µ—Å—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤: {ALLOWED_FORMATS_FILE_FOR_PLAY}. "
            f"–ï—Å–ª–∏ –ø—å–µ—Å–∞ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞, —Ñ–∞–π–ª —Å–∫–∞—á–∞—Ç—å –Ω–µ–ª—å–∑—è."
        ),
    )
    url_download_from = models.URLField(
        max_length=200,
        blank=True,
        null=True,
        verbose_name="–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ",
    )
    url_reading = models.URLField(
        max_length=200,
        blank=True,
        null=True,
        verbose_name="–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∏—Ç–∫—É",
        unique=True,
    )
    programs = models.ManyToManyField(
        ProgramType,
        related_name="plays",
        verbose_name="–ü—Ä–æ–≥—Ä–∞–º–º–∞",
        blank=True,
        help_text="–î–ª—è –ø—å–µ—Å –õ—é–±–∏–º–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ü—Ä–æ–≥—Ä–∞–º–º–∞.",
    )

    festival = models.ForeignKey(
        Festival,
        on_delete=models.PROTECT,
        related_name="plays",
        verbose_name="–§–µ—Å—Ç–∏–≤–∞–ª—å",
        blank=True,
        null=True,
        help_text="–î–ª—è –ø—å–µ—Å –õ—é–±–∏–º–æ–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω –§–µ—Å—Ç–∏–≤–∞–ª—å",
    )
    published = models.BooleanField(
        verbose_name="–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ",
        default=True,
    )
    other_play = models.BooleanField(
        verbose_name="–°—Ç–æ—Ä–æ–Ω–Ω—è—è –ø—å–µ—Å–∞",
        default=False,
    )

    class Meta:
        constraints = (
            UniqueConstraint(
                fields=("name", "festival"),
                name="unique_play",
            ),
        )
        verbose_name = "–ü—å–µ—Å–∞"
        verbose_name_plural = "–ü—å–µ—Å—ã"
        ordering = ("name",)

    def __str__(self):
        return (
            self.name
            + ("" if self.published else " <‚Äî üî¥ –ø—å–µ—Å–∞ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ ‚Äî>")
            + ("" if not self.other_play else " <‚Äî –î—Ä—É–≥–∞—è –ø—å–µ—Å–∞ ‚Äî>")
        )

    def clean(self):
        if self.other_play:
            if self.pk:
                self.programs.clear()
            self.festival = None
            self.url_reading = None
        elif not self.festival:
            raise ValidationError({"festival": "–£ –ø—å–µ—Å—ã –õ—é–±–∏–º–æ–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–µ—Å—Ç–∏–≤–∞–ª—å"})
        if (self.url_download and self.url_download_from) or (not self.url_download and not self.url_download_from):
            raise ValidationError(
                {
                    "url_download": "",
                    "url_download_from": _(
                        "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏–±–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º –ü—å–µ—Å—ã, –ª–∏–±–æ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ",
                    ),
                }
            )
        return super().clean()

    def save(self, *args, **kwargs):
        this = type(self).objects.filter(id=self.id).first()
        if this and not this.published:
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –ø—å–µ—Å—ã, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
            restore_play_file(this)

        super().save(*args, **kwargs)

        if self.published:
            restore_play_file(this)
        else:
            hide_play_file(this)
        return

    def delete(self, *args, **kwargs):
        this = type(self).objects.filter(id=self.id).first()
        if this and not this.published:
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –ø—å–µ—Å—ã, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
            restore_play_file(this)
        return super().delete(*args, **kwargs)
