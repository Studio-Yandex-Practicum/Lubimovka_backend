# Generated by Django 3.2.11 on 2022-01-29 10:57

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    replaces = [('library', '0001_initial'), ('library', '0002_auto_20211004_1737')]

    initial = True

    dependencies = [
        ('info', '0001'),
        ('afisha', '0001'),
        ('core', '0001'),
    ]

    operations = [
        migrations.CreateModel(
            name='Performance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Название спектакля')),
            ],
            options={
                'verbose_name': 'Спектакль',
                'verbose_name_plural': 'Спектакли',
            },
        ),
        migrations.CreateModel(
            name='Play',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Название пьесы')),
                ('is_draft', models.BooleanField(default=True, verbose_name='Черновик')),
            ],
            options={
                'verbose_name': 'Пьеса',
                'verbose_name_plural': 'Пьесы',
            },
        ),
        migrations.CreateModel(
            name='PerformanceReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('reviewer_name', models.CharField(max_length=100, verbose_name='Имя зрителя')),
                ('text', models.TextField(max_length=500, verbose_name='Текст отзыва')),
                ('url', models.URLField(blank=True, unique=True, verbose_name='Ссылка на отзыв')),
                ('pub_date', models.DateTimeField(blank=True, verbose_name='Дата публикации')),
                ('performance', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='reviews', to='library.performance', verbose_name='Спектакль')),
            ],
            options={
                'verbose_name': 'Отзыв зрителя на спектакль',
                'verbose_name_plural': 'Отзывы зрителей на спектакль',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PerformanceMediaReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('media_name', models.CharField(max_length=100, verbose_name='Название медиа ресурса')),
                ('text', models.TextField(max_length=500, verbose_name='Текст отзыва')),
                ('image', models.ImageField(upload_to='reviews/', verbose_name='Изображение')),
                ('url', models.URLField(blank=True, unique=True, verbose_name='Ссылка на отзыв')),
                ('pub_date', models.DateTimeField(blank=True, verbose_name='Дата публикации')),
                ('performance', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='media_reviews', to='library.performance', verbose_name='Спектакль')),
            ],
            options={
                'verbose_name': 'Медиа отзыв на спектакль',
                'verbose_name_plural': 'Медиа отзывы на спектакль',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('tag', models.CharField(help_text='Не более 40 символов', max_length=40, verbose_name='Достижения в виде тега')),
            ],
            options={
                'verbose_name': 'Достижение',
                'verbose_name_plural': 'Достижения',
            },
        ),
        migrations.CreateModel(
            name='MasterClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('description', models.TextField(max_length=500, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Мастер-класс',
                'verbose_name_plural': 'Мастер-классы',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='OtherLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('link', models.URLField(max_length=500, verbose_name='Ссылка')),
                ('is_pinned', models.BooleanField(help_text='Закрепить ссылку вверху страницы?', verbose_name='Закрепить ссылку')),
                ('order_number', models.PositiveSmallIntegerField(help_text='Указывается для формирования порядка вывода информации', verbose_name='Порядковый номер')),
            ],
            options={
                'verbose_name': 'Ссылка на сторонний ресурс',
                'verbose_name_plural': 'Ссылки на стороннии ресурсы',
                'ordering': ['order_number'],
            },
        ),
        migrations.CreateModel(
            name='OtherPlay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=40, verbose_name='Название')),
                ('link', models.URLField(max_length=1000, verbose_name='Ссылка на скачивание файла')),
            ],
            options={
                'verbose_name': 'Другая пьеса',
                'verbose_name_plural': 'Другие пьесы',
            },
        ),
        migrations.CreateModel(
            name='ProgramType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Название программы')),
            ],
            options={
                'verbose_name': 'Программа',
                'verbose_name_plural': 'Программы',
            },
        ),
        migrations.CreateModel(
            name='Reading',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('description', models.TextField(max_length=500, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Читка',
                'verbose_name_plural': 'Читки',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='SocialNetworkLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(choices=[('fb', 'Facebook'), ('inst', 'Instagram'), ('ytube', 'YouTube'), ('tlgrm', 'Telegram'), ('vk', 'Вконтакте')], max_length=200, verbose_name='Название')),
                ('link', models.URLField(max_length=500, verbose_name='Ссылка')),
            ],
            options={
                'verbose_name': 'Ссылка на социальную сеть',
                'verbose_name_plural': 'Ссылки на социальные сети',
            },
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('authors_plays_links', models.ManyToManyField(related_name='authors_links', to='library.Play', verbose_name='Ссылки на пьесы автора')),
                ('biography', models.TextField(max_length=3000, verbose_name='Текст про автора')),
                ('person', models.OneToOneField(default=1, on_delete=django.db.models.deletion.CASCADE, to='core.person', verbose_name='Автор')),
                ('quote', models.CharField(max_length=200, verbose_name='Цитата')),
            ],
            options={
                'verbose_name': 'Автор',
                'verbose_name_plural': 'Авторы',
            },
        ),
        migrations.AddField(
            model_name='play',
            name='authors',
            field=models.ManyToManyField(related_name='plays', to='library.Author', verbose_name='Автор'),
        ),
        migrations.AddField(
            model_name='play',
            name='city',
            field=models.CharField(default=1, max_length=200, unique=True, verbose_name='Город'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='play',
            name='festival',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='plays', to='info.festival', verbose_name='Фестиваль'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='play',
            name='url_download',
            field=models.URLField(blank=True, unique=True, verbose_name='Ссылка на скачивание пьесы'),
        ),
        migrations.AddField(
            model_name='play',
            name='url_reading',
            field=models.URLField(blank=True, unique=True, verbose_name='Ссылка на читку'),
        ),
        migrations.AddField(
            model_name='play',
            name='year',
            field=models.PositiveSmallIntegerField(default=1, unique=True, validators=[django.core.validators.MinValueValidator(1990), django.core.validators.MaxValueValidator(2021)], verbose_name='Год написания пьесы'),
            preserve_default=False,
        ),
        migrations.AddConstraint(
            model_name='play',
            constraint=models.UniqueConstraint(fields=('name', 'festival'), name='unique_play'),
        ),
        migrations.AddField(
            model_name='socialnetworklink',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.author', verbose_name='Автор'),
        ),
        migrations.AddField(
            model_name='reading',
            name='director',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='director_readings', to='core.person', verbose_name='Режиссер'),
        ),
        migrations.AddField(
            model_name='reading',
            name='dramatist',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='dramatist_readings', to='core.person', verbose_name='Драматург'),
        ),
        migrations.AddField(
            model_name='reading',
            name='event',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='readings', to='afisha.baseevent', verbose_name='Заголовок события'),
        ),
        migrations.AddField(
            model_name='reading',
            name='play',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='readings', to='library.play', verbose_name='Пьеса'),
        ),
        migrations.AddField(
            model_name='otherplay',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.author', verbose_name='Автор'),
        ),
        migrations.AddField(
            model_name='otherlink',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.author', verbose_name='Автор'),
        ),
        migrations.AddField(
            model_name='masterclass',
            name='director',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='director_masterclasses', to='core.person', verbose_name='Режиссер'),
        ),
        migrations.AddField(
            model_name='masterclass',
            name='dramatist',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='dramatist_masterclasses', to='core.person', verbose_name='Драматург'),
        ),
        migrations.AddField(
            model_name='masterclass',
            name='event',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='masterclasses', to='afisha.baseevent', verbose_name='Заголовок события'),
        ),
        migrations.AddField(
            model_name='masterclass',
            name='host',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='leading_masterclasses', to='core.person', verbose_name='Ведущий'),
        ),
        migrations.AddField(
            model_name='author',
            name='achievements',
            field=models.ManyToManyField(to='library.Achievement', verbose_name='Достижения'),
        ),
        migrations.AddField(
            model_name='author',
            name='other_links',
            field=models.ManyToManyField(related_name='authors', to='library.OtherLink', verbose_name='Ссылки на внешние ресурсы'),
        ),
        migrations.AddField(
            model_name='author',
            name='other_plays_links',
            field=models.ManyToManyField(blank=True, related_name='authors_links', to='library.OtherPlay', verbose_name='Ссылки на другие пьесы'),
        ),
        migrations.AddField(
            model_name='author',
            name='social_network_links',
            field=models.ManyToManyField(related_name='authors', to='library.SocialNetworkLink', verbose_name='Ссылки на социальные сети'),
        ),
        migrations.AddField(
            model_name='play',
            name='program',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='plays', to='library.programtype', verbose_name='Программа'),
            preserve_default=False,
        ),
        migrations.AddConstraint(
            model_name='socialnetworklink',
            constraint=models.UniqueConstraint(fields=('author', 'name'), name='unique_social_network'),
        ),
        migrations.AddConstraint(
            model_name='otherplay',
            constraint=models.UniqueConstraint(fields=('author', 'name'), name='unique_other_play'),
        ),
        migrations.AddConstraint(
            model_name='otherlink',
            constraint=models.UniqueConstraint(fields=('author', 'name'), name='unique_link'),
        ),
    ]
