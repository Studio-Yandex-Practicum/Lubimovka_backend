name: Prod backend build and  deploy

concurrency:
  group: prod_deploy
  cancel-in-progress: true

on:
  push:
    branches:
      - cicd

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: lubimovka_backend-1
  DEPLOY_PATH: /LUBIMOVKA

defaults:
  run:
    working-directory: .

jobs:
  build-and-push-image-to-github-packages:
    name: Push Docker image to GitHub Packages
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
      -
        name: Docker login
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          labels: runnumber=${GITHUB_RUN_ID}
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.IMAGE_NAME }}:master,${{ env.REGISTRY }}/${{ github.actor }}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${{ github.actor }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    name: Deploy changes on server
    runs-on: ubuntu-latest
    environment:
      name: prod_deploy
    needs: build-and-push-image-to-github-packages
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
      -
        name: Create SSH key
        # (SSH_KNOWN_HOSTS=ssh-keyscan -H сервер, SSH_PRIVATE_KEY - ключ с ПК, которому разрешен вход)
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      -
        name: Create folder for application
        run: ssh ${{ secrets.USERNAME }}@${{ secrets.HOST }} mkdir -p ${{ env.DEPLOY_PATH }}
      -
        name: Deploy with scp
        run: scp -r infra_deploy/prod/ ${{ secrets.USERNAME }}@${{ secrets.HOST }}:${{ env.DEPLOY_PATH }}
      -
        name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd ${{ env.DEPLOY_PATH }}/prod/

            # GitHub variables
            echo "IMAGE_BACK=${{ secrets.IMAGE_BACK }}" > .github_vars
            echo "IMAGE_BACK_TAG=${{ secrets.IMAGE_BACK_TAG }}" >> .github_vars
            echo "IMAGE_FRONT=${{ secrets.IMAGE_FRONT }}" >> .github_vars
            echo "IMAGE_FRONT_TAG=${{ secrets.IMAGE_FRONT_TAG }}" >> .github_vars
            echo "FRONT_BASE_URL=${{ secrets.FRONT_BASE_URL }}" >> .github_vars
            echo "DEVELOP_API_BASE_URL=${{ secrets.DEVELOP_API_BASE_URL }}" >> .github_vars
            echo "TEST_API_BASE_URL=${{ secrets.TEST_API_BASE_URL }}" >> .github_vars
            echo "DEV_SUBDOMAIN=${{ secrets.DEV_SUBDOMAIN }}" >> .github_vars
            echo "TEST_SUBDOMAIN=${{ secrets.TEST_SUBDOMAIN }}" >> .github_vars

            # PostgreSQL environment variables
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} > .env-prod
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env-prod
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env-prod
            echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> .env-prod
            echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .env-prod
            
            # Django environment variables
            echo DJANGO_SETTINGS_MODULE=${{ secrets.DJANGO_SETTINGS_MODULE }} >> .env-prod
            echo DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} >> .env-prod
            echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> .env-prod
            echo DJANGO_EMAIL_BACKEND=${{ secrets.DJANGO_EMAIL_BACKEND }} >> .env-prod
            echo DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }} >> .env-prod
            echo DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL }} >> .env-prod
            echo DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }} >> .env-prod
            echo DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }} >> .env-prod
            echo SERVER_EMAIL=${{ secrets.SERVER_EMAIL }} >> .env-prod
            echo MAILJET_API_KEY=${{ secrets.MAILJET_API_KEY }} >> .env-prod
            echo MAILJET_SECRET_KEY=${{ secrets.MAILJET_SECRET_KEY }} >> .env-prod

            # Swag environment variables
            echo PUID=${{ secrets.PUID }} >> .env-prod
            echo PGID=${{ secrets.PGID }} >> .env-prod
            echo URL=${{ secrets.URL }} >> .env-prod
            echo EMAIL=${{ secrets.SSL_EMAIL }} >> .env-prod

            docker network create prod_db_network || true
            docker network create prod_swag_network || true
            
            # Установка приложения - backend
            cp -rf ${{ env.DEPLOY_PATH }}/prod/lubimovka-backend.service /etc/systemd/system/lubimovka-backend.service
            systemctl daemon-reload
            systemctl restart lubimovka-backend.service

            # Установка приложения - frontend
            cp -rf ${{ env.DEPLOY_PATH }}/prod/lubimovka-frontend.service /etc/systemd/system/lubimovka-frontend.service
            systemctl daemon-reload
            systemctl restart lubimovka-frontend.service

            # После установки удаляем файлы
            rm ${{ env.DEPLOY_PATH }}/prod/lubimovka-backend.service
            rm ${{ env.DEPLOY_PATH }}/prod/lubimovka-frontend.service
  
  send_message:
    name: Send message in telegram group
    runs-on: ubuntu-latest
    environment:
      name: prod_deploy
    needs: deploy
    steps:
      - name: check repository
        uses: actions/checkout@v1
      - name: find the PR associated with this push, if there is one
        uses: jwalton/gh-find-current-pr@v1
        id: findPr
        with:
          state: closed
      - run: echo "PR=${PR}" >> $GITHUB_ENV
        if: success() && steps.findPr.outputs.number
        env:
          PR: ${{ steps.findPr.outputs.pr }}
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
                  Код на PROD сервере обновлён!
                  Изменения можно посмотреть в PR:
                  ${{ secrets.HUB_URL }}/${{ github.repository }}/pull/${{env.PR}}
                  Сайт доступен по адресу:
                  https://${{ secrets.DEV_SUBDOMAIN }}.${{ secrets.SITE_URL }}
                  Сcылка на документацию в Swagger:
                  ${{ secrets.DEVELOP_SWAGGER_URL }}
                  Панель администратора:
                  ${{ secrets.DEVELOP_ADMIN_URL }}
