name: Deploy your branch for testing

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Please, enter your name and surname'
        default: 'Имя Фамилия'
        required: true

env:
  REGISTRY: ghcr.io
  REPOSITORY_NAME: lubimovka_backend

defaults:
  run:
    working-directory: .

jobs:
  tests:
      name: Run tests
      runs-on: ubuntu-latest
      steps:
      -
        name: Check out the repo
        uses: actions/checkout@v2
      -
        name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      -
        name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt
      -
        name: Test with pytest
        run: pytest
  build-and-push-image-to-github-packages:
    name: Push Docker image to GitHub Packages
    runs-on: ubuntu-latest
    needs: tests
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2
      - name: Build image
        run: docker build . --file Dockerfile --tag $REPOSITORY_NAME --label "runnumber=${GITHUB_RUN_ID}"
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Push image
        run: |
          IMAGE_ID=$REGISTRY/${{ github.repository_owner }}/$REPOSITORY_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $REPOSITORY_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
  deploy_testing_branch:
    name: Deploy branch for testing in the server
    runs-on: ubuntu-latest
    needs: build-and-push-image-to-github-packages
    steps:
      - name: Getting docker image name and tag, write in environment
        run: |
          IMAGE=$REGISTRY/${{ github.repository_owner }}/$REPOSITORY_NAME
          IMAGE=$(echo $IMAGE | tr '[A-Z]' '[a-z]')
          IMAGE_TAG=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && IMAGE_TAG=$(echo $IMAGE_TAG | sed -e 's/^v//')

          echo IMAGE=$IMAGE >> $GITHUB_ENV
          echo IMAGE_TAG=$IMAGE_TAG >> $GITHUB_ENV
      -
        name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd ${{ github.event.repository.name }}/infra_deploy
            ./check_env_script.sh .env-test

            # Github package name: writing in .env to read in docker-compose script
            ./check_env_script.sh .github_image
            echo "IMAGE=${{ env.IMAGE }}" >> .github_image
            echo "IMAGE_TAG=${{ env.IMAGE_TAG }}" >> .github_image
            source .github_image
            export IMAGE
            export IMAGE_TAG

            # PostgreSQL variables: reading and writing Github secrets in .env-test
            echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST_TEST }} >> .env-test
            echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .env-test
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB_TEST }} >> .env-test
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env-test
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env-test

            # Django variables: reading and writing Github secrets in .env-test
            echo DJANGO_SETTINGS_MODULE=${{ secrets.DJANGO_SETTINGS_MODULE }} >> .env-test
            echo DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} >> .env-test
            echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS_TEST }} >> .env-test

            echo DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }} >> .env-test
            echo DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL }} >> .env-test
            echo DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }} >> .env-test

            echo DJANGO_EMAIL_BACKEND=${{ secrets.DJANGO_EMAIL_BACKEND }} >> .env-dev
            echo DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }} >> .env-dev
            echo SERVER_EMAIL=${{ secrets.SERVER_EMAIL }} >> .env-dev
            echo MAILJET_API_KEY=${{ secrets.MAILJET_API_KEY }} >> .env-dev
            echo MAILJET_SECRET_KEY=${{ secrets.MAILJET_SECRET_KEY }} >> .env-dev

            # Pull docker image from github packages with tag
            docker pull ${{ env.IMAGE }}:${{ env.IMAGE_TAG }}

            # re-run docker containers and remove database volumes
            docker-compose -f test_branch_deploy.yaml down
            docker volume rm infra_deploy_postgres_data_test
            docker-compose -f test_branch_deploy.yaml up -d
  send_message:
    name: Send message in telegram group
    runs-on: ubuntu-latest
    needs: deploy_testing_branch
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
                  Новая ветка в тестировании:
                  https://github.com/${{ github.repository }}/tree/${{ github.ref_name }}

                  Тестирует - ${{ github.event.inputs.name }}

                  Сcылка на документацию в Swagger:
                  https://test-lubimovka.kiryanov.ru/api/v1/schema/swagger-ui/

                  Панель администратора:
                  https://test-lubimovka.kiryanov.ru/admin/
